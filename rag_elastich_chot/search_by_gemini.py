import os
import time
import google.generativeai as genai
from elasticsearch import Elasticsearch
from dotenv import load_dotenv

# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()

# K·∫øt n·ªëi Elasticsearch
ELASTICSEARCH_HOST = os.getenv("ELASTICSEARCH_HOST", "http://localhost:9200")
es = Elasticsearch(ELASTICSEARCH_HOST)

# C·∫•u h√¨nh Gemini
genai.configure(api_key="AIzaSyCM9BL3FkNcpf0aimQCUTnGuTvhhG6zw3Q")
model = genai.GenerativeModel("gemini-2.0-flash")

# L·ªãch s·ª≠ h·ªôi tho·∫°i
history = []

# L·∫•y danh s√°ch t·∫•t c·∫£ index c√≥ t√†i li·ªáu
try:
    all_indices = es.cat.indices(format="json")
    INDEX_NAMES = [index["index"] for index in all_indices if "index" in index and index["index"].startswith("documents_")]
except Exception as e:
    print(f"‚ö†Ô∏è L·ªói khi l·∫•y danh s√°ch index: {e}")
    INDEX_NAMES = []

# Danh m·ª•c th∆∞ m·ª•c theo ch·ªß ƒë·ªÅ
TOPIC_FOLDERS = {
    "Kinh t·∫ø": "kinh-te",
    "Khoa h·ªçc": "khoa-hoc",
    "Nh√¢n s·ª±": "nhan-su",
    "Ch∆∞a x√°c ƒë·ªãnh": "chua-xac-dinh",
    "Th√¥ng tin c√° nh√¢n": "thong-tin-ca-nhan",
}

def analyze_question(question):
    """D√πng Gemini ƒë·ªÉ ph√¢n t√≠ch c√¢u h·ªèi v√† x√°c ƒë·ªãnh h∆∞·ªõng x·ª≠ l√Ω."""
    global history
    chat = model.start_chat(history=history)
    prompt = f"""
    D∆∞·ªõi ƒë√¢y l√† danh s√°ch ch·ªß ƒë·ªÅ:
    {', '.join(TOPIC_FOLDERS.keys())}

    C√¢u h·ªèi: "{question}"

    H√£y ph√¢n lo·∫°i c√¢u h·ªèi v√†o m·ªôt trong c√°c tr∆∞·ªùng h·ª£p sau:
    1. Cu·ªôc h·ªôi tho·∫°i th√¥ng th∆∞·ªùng.
    2. C√¢u h·ªèi c·∫ßn t√¨m ki·∫øm d·ªØ li·ªáu c·ª• th·ªÉ trong t√†i li·ªáu.
    3. C·∫ßn t√¨m ki·∫øm theo m·ªôt trong c√°c ch·ªß ƒë·ªÅ: {', '.join(TOPIC_FOLDERS.keys())}.
    4. C·∫ßn t√¨m ki·∫øm tr√™n t·∫•t c·∫£ c√°c th∆∞ m·ª•c n·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ch·ªß ƒë·ªÅ c·ª• th·ªÉ.

    Tr·∫£ l·ªùi ch·ªâ b·∫±ng m·ªôt trong c√°c k·∫øt qu·∫£ sau:
    - "Cu·ªôc h·ªôi tho·∫°i"
    - "T√¨m ki·∫øm c·ª• th·ªÉ"
    - T√™n ch·ªß ƒë·ªÅ ch√≠nh x√°c (v√≠ d·ª•: "Kinh t·∫ø")
    - "T√¨m ki·∫øm t·∫•t c·∫£"
    """
    response = chat.send_message(prompt)
    return response.text.strip()

def search_and_respond(question):
    """T√¨m ki·∫øm t√†i li·ªáu trong Elasticsearch ho·∫∑c tr·∫£ l·ªùi tr·ª±c ti·∫øp b·∫±ng Gemini."""
    global history
    start_time = time.time()
    action = analyze_question(question)

    if action == "Cu·ªôc h·ªôi tho·∫°i":
        print("üó£Ô∏è C√¢u h·ªèi l√† cu·ªôc h·ªôi tho·∫°i th√¥ng th∆∞·ªùng.")
        chat = model.start_chat(history=history)
        response = chat.send_message(question)
        history.append({"role": "user", "parts": [question]})
        history.append({"role": "model", "parts": [response.text]})
        end_time = time.time()
        print(f"‚è≥ Ho√†n th√†nh trong {end_time - start_time:.4f} gi√¢y")
        return response.text

    # üß† X√°c ƒë·ªãnh ki·ªÉu t√¨m ki·∫øm
    if action == "T√¨m ki·∫øm c·ª• th·ªÉ":
        print("üîç C·∫ßn t√¨m ki·∫øm d·ªØ li·ªáu c·ª• th·ªÉ trong t√†i li·ªáu.")
        search_query = {
            "bool": {
                "must": [
                    {"match": {"content": question}},
                    {"match_phrase": {"content": question}}
                ]
            }
        }
    elif action in TOPIC_FOLDERS:
        folder = TOPIC_FOLDERS[action]
        print(f"üìÇ AI x√°c ƒë·ªãnh c√¢u h·ªèi thu·ªôc th∆∞ m·ª•c: {folder}")
        search_query = {
            "bool": {
                "must": [{"match": {"content": question}}],
                "should": [
                    {"match": {"folder": folder}},
                    {"match": {"folder": "chua-xac-dinh"}},
                ]
            }
        }
    else:
        print("üîç AI kh√¥ng ch·∫Øc ch·∫Øn, t√¨m ki·∫øm tr√™n t·∫•t c·∫£ th∆∞ m·ª•c.")
        search_query = {
            "bool": {
                "must": [{"match": {"content": question}}],
                "should": [{"match_phrase": {"content": question}}]
            }
        }

    # üîé T√¨m ki·∫øm trong t·∫•t c·∫£ index c√≥ s·∫µn
    documents = []
    if INDEX_NAMES:
        try:
            size_limit = 3
            if action == "T√¨m ki·∫øm t·∫•t c·∫£" or action == "T√¨m ki·∫øm c·ª• th·ªÉ":
                size_limit = 5  # üîπ N·∫øu t√¨m tr√™n t·∫•t c·∫£, l·∫•y th√™m t√†i li·ªáu
            search_result = es.search(index=",".join(INDEX_NAMES), body={
                "query": search_query,
                "_source": ["content", "filename", "folder"],  # Ch·ªâ l·∫•y c√°c field c·∫ßn thi·∫øt
                "from": 0,  # B·∫Øt ƒë·∫ßu t·ª´ k·∫øt qu·∫£ ƒë·∫ßu ti√™n
                "size": size_limit,   # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng k·∫øt qu·∫£ tr·∫£ v·ªÅ
                "track_total_hits": False,  # Gi√∫p t·ªëi ∆∞u hi·ªáu su·∫•t khi kh√¥ng c·∫ßn t·ªïng s·ªë k·∫øt qu·∫£
                "highlight": {
                    "fields": {"content": {"fragment_size": 200, "number_of_fragments": 3}}
                }
            }, request_cache=True)  # K√≠ch ho·∫°t caching cho query
            documents = search_result["hits"].get("hits", [])
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi t√¨m ki·∫øm: {e}")

    if not documents:
        return "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu ph√π h·ª£p."

    # üìÑ L·∫•y n·ªôi dung v√† ngu·ªìn t√†i li·ªáu
    context = "\n\n".join([f"(üìÑ {doc['_source']['filename']} - {doc['_source']['folder']}) {doc['_source']['content']}" for doc in documents])

    # üñ•Ô∏è C·∫≠p nh·∫≠t l·ªãch s·ª≠ h·ªôi tho·∫°i v·ªõi c·∫£ t√†i li·ªáu tham kh·∫£o
    prompt = f"""
    D∆∞·ªõi ƒë√¢y l√† t√†i li·ªáu tham kh·∫£o:

    {context}

    C√¢u h·ªèi: {question}

    Tr·∫£ l·ªùi m·ªôt c√°ch ch√≠nh x√°c d·ª±a tr√™n t√†i li·ªáu tr√™n.
    """

    history.append({"role": "user", "parts": [f"[T√†i li·ªáu tham kh·∫£o]\n{context}\n\nC√¢u h·ªèi: {question}"]})

    # üñ®Ô∏è In n·ªôi dung g·ª≠i l√™n chatbot tr∆∞·ªõc khi g·ª≠i
    # print("\nüöÄ N·ªôi dung g·ª≠i l√™n chatbot:")
    # print(prompt)
    # print("\nüì° G·ª≠i y√™u c·∫ßu ƒë·∫øn chatbot...\n")

    chat = model.start_chat(history=history)
    response = chat.send_message(prompt)

    # L∆∞u l·∫°i ph·∫£n h·ªìi
    history.append({"role": "model", "parts": [response.text]})

    end_time = time.time()
    print(f"‚è≥ Ho√†n th√†nh trong {end_time - start_time:.4f} gi√¢y")
    return response.text

if __name__ == "__main__":
    while True:
        question = input("Nh·∫≠p c√¢u h·ªèi (ho·∫∑c 'exit' ƒë·ªÉ tho√°t): ")
        if question.lower() in ["exit", "quit", "tho√°t"]:
            print("K·∫øt th√∫c h·ªôi tho·∫°i.")
            break
        answer = search_and_respond(question)
        print("Tr·ª£ l√Ω AI:", answer)
