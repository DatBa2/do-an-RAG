import requests
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram.ext import MessageHandler, filters
from search_by_gemini import search_and_respond, chat_and_respond
from requests.auth import HTTPBasicAuth
from dotenv import load_dotenv
load_dotenv()

TELEGRAM_TOKEN = '7201416424:AAHLwyzpJoyzr5A7CdmLxmrv1ZYe4HjcnvY'
ALLOWED_USER_IDS = [6554124253]

# T·∫°o danh s√°ch ƒë·ªÉ l∆∞u tr·ªØ message_id c·ªßa c√°c tin nh·∫Øn bot ƒë√£ g·ª≠i
sent_messages = []

# /start - Ch√†o m·ª´ng ng∆∞·ªùi d√πng
async def handle_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.chat.send_action("typing")
    welcome_text = (
        "<b>Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Tr·ª£ l√Ω AI c·ªßa Nguy·ªÖn B√° ƒê·∫°t!</b>\n\n"
        "T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n tr·∫£ l·ªùi c√¢u h·ªèi, truy xu·∫•t d·ªØ li·ªáu n·ªôi b·ªô (n·∫øu b·∫°n c√≥ quy·ªÅn), "
        "v√† l∆∞u l·ªãch s·ª≠ tr√≤ chuy·ªán.\n\n"
        "G√µ <b>/help</b> ƒë·ªÉ xem danh s√°ch l·ªánh h·ªó tr·ª£."
    )
    new_message = await update.message.reply_text(welcome_text, parse_mode='HTML')
    # L∆∞u message_id c·ªßa tin nh·∫Øn bot ƒë√£ g·ª≠i
    sent_messages.append(new_message.message_id)

# /help - Hi·ªÉn th·ªã danh s√°ch l·ªánh
async def handle_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.chat.send_action("typing")
    help_text = (
        "<b>Danh s√°ch l·ªánh h·ªó tr·ª£:</b>\n\n"
        "<b>/start</b> - B·∫Øt ƒë·∫ßu tr√≤ chuy·ªán v·ªõi bot\n"
        "<b>/help</b> - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng\n"
        "<b>/noi_bo [c√¢u h·ªèi]</b> - T√¨m ki·∫øm d·ªØ li·ªáu n·ªôi b·ªô\n"
        "<b>/history</b> - L·∫•y l·ªãch s·ª≠ tr√≤ chuy·ªán g·∫ßn ƒë√¢y\n"
        "<b>/jira</b> - Xem danh s√°ch ticket Jira m·ªõi nh·∫•t\n"
        "<b>/jira_login [t√†i kho·∫£n] [m·∫≠t kh·∫©u]</b> - ƒêƒÉng nh·∫≠p v√†o Jira v√† xem ticket c·ªßa b·∫°n\n\n"
        "<b>L∆∞u √Ω:</b>\n"
        "  - L·ªánh /jira y√™u c·∫ßu b·∫°n ph·∫£i c√≥ quy·ªÅn truy c·∫≠p Jira c·ªßa VNPT.\n"
        "  - L·ªánh /jira_login y√™u c·∫ßu t√†i kho·∫£n v√† m·∫≠t kh·∫©u c·ªßa b·∫°n.\n"
        "B·∫°n c≈©ng c√≥ th·ªÉ g·ª≠i tin nh·∫Øn ƒë·ªÉ tr√≤ chuy·ªán tr·ª±c ti·∫øp."
    )
    new_message = await update.message.reply_text(help_text, parse_mode='HTML')
    sent_messages.append(new_message.message_id)

# /noi_bo - X·ª≠ l√Ω t√¨m ki·∫øm n·ªôi b·ªô
async def handle_noi_bo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o d·ªØ li·ªáu n·ªôi b·ªô.")
        return

    user_message = ' '.join(context.args)
    if not user_message:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p c√¢u h·ªèi sau l·ªánh /noi_bo.")
        return

    try:
        await update.message.chat.send_action("typing")
        reply_text = search_and_respond(user_message, 0, user_id)
    except Exception as e:
        reply_text = f"L·ªói khi truy v·∫•n d·ªØ li·ªáu n·ªôi b·ªô: {e}"

    await update.message.reply_text(reply_text[:4000])

# /history - Hi·ªÉn th·ªã l·ªãch s·ª≠ (t·∫°m th·ªùi)
async def handle_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.chat.send_action("typing")
    await update.message.reply_text("Ch·ª©c nƒÉng xem l·ªãch s·ª≠ ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.")

# X·ª≠ l√Ω tin nh·∫Øn th√¥ng th∆∞·ªùng
async def handle_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    try:
        await update.message.chat.send_action("typing")
        reply_text = chat_and_respond(user_message, 0, update.effective_user.id)
    except Exception as e:
        reply_text = f"L·ªói khi g·ªçi AI: {e}"

    new_message = await update.message.reply_text(reply_text[:4000])
    sent_messages.append(new_message.message_id)

# X√≥a t·∫•t c·∫£ tin nh·∫Øn ƒë√£ g·ª≠i
async def delete_previous_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for message_id in sent_messages:
        try:
            await update.message.chat.delete_message(message_id)
        except Exception as e:
            print(f"Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn v·ªõi message_id {message_id}: {e}")
    sent_messages.clear()

# X·ª≠ l√Ω l·ªánh /new_chat
async def handle_new_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # X√≥a t·∫•t c·∫£ c√°c tin nh·∫Øn tr∆∞·ªõc ƒë√≥
    await delete_previous_messages(update, context)

    # G·ª≠i l·∫°i th√¥ng b√°o ch√†o m·ª´ng nh∆∞ khi b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán m·ªõi
    welcome_text = (
        "<b>Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Tr·ª£ l√Ω AI c·ªßa Nguy·ªÖn B√° ƒê·∫°t!</b>\n\n"
        "T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n tr·∫£ l·ªùi c√¢u h·ªèi, truy xu·∫•t d·ªØ li·ªáu n·ªôi b·ªô (n·∫øu b·∫°n c√≥ quy·ªÅn), "
        "v√† l∆∞u l·ªãch s·ª≠ tr√≤ chuy·ªán.\n\n"
        "G√µ <b>/help</b> ƒë·ªÉ xem danh s√°ch l·ªánh h·ªó tr·ª£."
    )
    new_message = await update.message.reply_text(welcome_text, parse_mode='HTML')
    sent_messages.append(new_message.message_id)

async def handle_jira(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p Jira.")
        return

    await update.message.chat.send_action("typing")

    try:
        # L·∫•y th√¥ng tin x√°c th·ª±c t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (ho·∫∑c file .env)
        jira_user = os.getenv("JIRA_USERNAME", "your_username")
        jira_pass = os.getenv("JIRA_PASSWORD", "your_password")
        jira_url = "https://cntt.vnpt.vn/rest/api/2/search"
        project_key = "VNPTEDU"

        params = {
            "jql": f"project={project_key} ORDER BY created DESC",
            "maxResults": 5
        }

        response = requests.get(jira_url, params=params, auth=HTTPBasicAuth(jira_user, jira_pass))

        if response.status_code == 200:
            issues = response.json().get("issues", [])
            if not issues:
                await update.message.reply_text("Kh√¥ng t√¨m th·∫•y ticket n√†o.")
                return

            message = "<b>Danh s√°ch ticket Jira m·ªõi nh·∫•t:</b>\n\n"
            for issue in issues:
                key = issue["key"]
                summary = issue["fields"]["summary"]
                status = issue["fields"]["status"]["name"]
                message += f"üîπ <b>{key}</b> | {status}\n‚û°Ô∏è {summary}\n\n"

            await update.message.reply_text(message[:4000], parse_mode="HTML")
        else:
            await update.message.reply_text(f"L·ªói g·ªçi Jira API: {response.status_code}\n{response.text}")
    except Exception as e:
        await update.message.reply_text(f"L·ªói khi g·ªçi Jira: {e}")

async def handle_jira_login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p Jira.")
        return

    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ nh·∫≠p ƒë·ªß t√†i kho·∫£n v√† m·∫≠t kh·∫©u ch∆∞a
    if len(context.args) != 2:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p t√†i kho·∫£n v√† m·∫≠t kh·∫©u nh∆∞ sau: /jira_login [t√†i kho·∫£n] [m·∫≠t kh·∫©u]")
        return

    jira_user = context.args[0]
    jira_pass = context.args[1]

    try:
        # X·ª≠ l√Ω x√°c th·ª±c v·ªõi t√†i kho·∫£n v√† m·∫≠t kh·∫©u m·ªõi
        jira_url = "https://cntt.vnpt.vn/rest/api/2/search"
        project_key = "VNPTEDU"

        params = {
            "jql": f"project={project_key} ORDER BY created DESC",
            "maxResults": 5
        }

        response = requests.get(jira_url, params=params, auth=HTTPBasicAuth(jira_user, jira_pass))

        if response.status_code == 200:
            issues = response.json().get("issues", [])
            if not issues:
                await update.message.reply_text("Kh√¥ng t√¨m th·∫•y ticket n√†o.")
                return

            message = "<b>Danh s√°ch ticket Jira m·ªõi nh·∫•t:</b>\n\n"
            for issue in issues:
                key = issue["key"]
                summary = issue["fields"]["summary"]
                status = issue["fields"]["status"]["name"]
                message += f"üîπ <b>{key}</b> | {status}\n‚û°Ô∏è {summary}\n\n"

            await update.message.reply_text(message[:4000], parse_mode="HTML")
        else:
            await update.message.reply_text(f"L·ªói g·ªçi Jira API: {response.status_code}\n{response.text}")
    except Exception as e:
        await update.message.reply_text(f"L·ªói khi g·ªçi Jira: {e}")


def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", handle_start))
    app.add_handler(CommandHandler("help", handle_help))
    app.add_handler(CommandHandler("noi_bo", handle_noi_bo))
    app.add_handler(CommandHandler("history", handle_history))
    app.add_handler(CommandHandler("new_chat", handle_new_chat))
    app.add_handler(CommandHandler("jira", handle_jira))
    app.add_handler(CommandHandler("jira_login", handle_jira_login))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_chat))

    print("Bot ƒëang ch·∫°y...")
    app.run_polling()

if __name__ == '__main__':
    main()
